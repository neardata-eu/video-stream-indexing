#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

- name: Get common facts
  hosts: ["bookkeeper", "metrics"]
  tags: ["always"]
  connection: ssh
  become: true
  vars_files:
    - vars.yaml
  tasks:
    - set_fact:
        pravegaVersion: "{{ pravegaVersion }}"
        zookeeperVersion: "{{ zookeeperVersion }}"
        bookkeeperVersion: "{{ bookkeeperVersion }}"
        prometheusVersion: "{{ prometheusVersion }}"
        pravegaContainersPerSegmentStore: "{{ pravegaContainersPerSegmentStore }}"
        zookeeperServers: "{{ groups['bookkeeper'] | map('extract', hostvars, ['ansible_default_ipv4', 'address']) | map('regex_replace', '^(.*)$', '\\1:2181') | join(',') }}"
        controllerUrl: "tcp://{{ hostvars[groups['bookkeeper'][0]].private_ip }}:9090"
        private_ip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
        segmentStoreCount: "{{ groups['bookkeeper'] | length }}"
        influxDBURI: "http://{{ hostvars[groups['metrics'][0]].private_ip }}:8086"
    - set_fact:
        # Change below to use a published release of Pravega or a local build.
        pravegaSrc: "https://github.com/pravega/pravega/releases/download/v{{ pravegaVersion }}/pravega-{{ pravegaVersion }}.tgz"
        pravegaSrcRemote: yes
        # Here is the file path for local Pravega build
        # pravegaSrc: "/root/serverless-benchmarks/pravega/build/distributions/pravega-0.14.0-3270.3a7e21d-SNAPSHOT.tgz"
        # pravegaSrcRemote: no
        pravegaContainerCount: "{{ segmentStoreCount|int * pravegaContainersPerSegmentStore|int }}"

- name: Uninstall
  hosts: ["bookkeeper"]
  tags: ["uninstall"]
  connection: ssh
  become: true
  tasks:
    - name: Stop services
      systemd:
        name: "{{ item }}"
        state: stopped
        enabled: no
      ignore_errors: yes
      with_items:
        - "benchmark-worker"
        - "pravega-segmentstore"
        - "pravega-controller"
        - "bookkeeper"
        - "zookeeper"
    - name: Delete files on hosts
      shell: "rm -rf /opt/pravega /opt/zookeeper /opt/bookkeeper /opt/benchmark /mnt/journal/* /mnt/storage/*"
      args:
        warn: no
    - name: Delete files on tier 2
      shell: "rm -rf /mnt/tier2/*"
      when: groups['bookkeeper'][0] == inventory_hostname
      args:
        warn: no
    - name: Unmount tier 2
      shell: "umount /mnt/tier2"
      ignore_errors: yes

- name: Common installation
  hosts: ["bookkeeper"]
  tags: ["controller", "segmentstore", "bookkeeper", "zookeeper", "client", "metrics"]
  connection: ssh
  become: true
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
    - name: Install apt packages
      apt: 
        name:
          - chrony
          - openjdk-11-jdk
          - nano
          - netcat
          - nfs-common
          - sysstat
          - unzip
          - vim
          - wget
          - zip
    - name: Change locale to en_US.utf-8
      shell: |
        echo 'LANG=en_US.utf-8
              LC_ALL=en_US.utf-8' > /etc/environment
    - sysctl:
        name: fs.file-max
        value: "64000"
        sysctl_file: /etc/sysctl.conf
        reload: yes
    - pam_limits:
        domain: '*'
        limit_type: '-'
        limit_item: nofile
        value: 64000

- name: Docker installation
  hosts: ["bookkeeper", "metrics"]
  tags: ["metrics"]
  connection: ssh
  remote_user: ubuntu
  become: yes
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
    - name: Install required packages
      apt:
        name: ['ca-certificates', 'curl']
        state: present
    - name: Create directory for Docker GPG key
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
    - name: Download Docker's official GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'
    - name: Add Docker repository to Apt sources
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
        apt-get update
    - name: Install Docker and related packages
      apt:
        name: ['docker-ce', 'docker-ce-cli', 'containerd.io', 'docker-buildx-plugin', 'docker-compose-plugin']
        state: present
    - name: Test Docker
      command: docker run hello-world

# - name: Prometheus installation
#   hosts: ["bookkeeper"]
#   tags: ["prometheus"]
#   connection: ssh
#   become: true
#   tasks:
#     - file: path=/opt/prometheus state=absent
#     - file: path=/opt/prometheus state=directory
#     - name: Download Prometheus Binary Package
#       unarchive:
#         src: "https://github.com/prometheus/prometheus/releases/download/v{{ prometheusVersion }}/prometheus-{{ prometheusVersion }}.linux-amd64.tar.gz"
#         remote_src: yes
#         dest: /opt/prometheus
#         extra_opts: ["--strip-components=1"]
#     - file:
#         path: "/opt/prometheus/data"
#         state: directory
#     - template:
#         src: "templates/prometheus.service"
#         dest: "/etc/systemd/system/prometheus.service"
#     - template:
#         src: "templates/prometheus-all-in-one.yml"
#         dest: "/opt/prometheus/prometheus.yml"
#     - systemd:
#         name: "prometheus"
#         daemon_reload: yes
#         state: restarted
#         enabled: yes

- name: InfluxDB installation
  hosts: ["metrics"]
  tags: ["influxdb"]
  connection: ssh
  become: true
  tasks:
    - template:
        src: "templates/influxdb.service"
        dest: "/etc/systemd/system/influxdb.service"
    - systemd:
        name: "influxdb"
        daemon_reload: yes
        state: restarted
        enabled: yes

- name: Pravega Dashboard installation
  hosts: ["metrics"]
  tags: ["dashboard"]
  connection: ssh
  become: true
  tasks:
    - template:
        src: "templates/pravega-dashboard.service"
        dest: "/etc/systemd/system/pravega-dashboard.service"
    - systemd:
        name: "pravega-dashboard"
        daemon_reload: yes
        state: restarted
        enabled: yes

# - name: Prometheus Node Exporter
#   hosts: ["bookkeeper", "metrics"]
#   tags: ["node-exporter"]
#   roles:
#     - cloudalchemy.node_exporter

- name: ZooKeeper setup
  hosts: ["bookkeeper"]
  tags: ["zookeeper"]
  connection: ssh
  become: true
  tasks:
    - file: path=/opt/zookeeper state=absent
    - file: path=/opt/zookeeper state=directory
    - name: Download ZooKeeper binary package
      unarchive:
        src: "http://archive.apache.org/dist/zookeeper/zookeeper-{{ zookeeperVersion }}/apache-zookeeper-{{ zookeeperVersion }}-bin.tar.gz"
        remote_src: yes
        dest: /opt/zookeeper
        extra_opts: ["--strip-components=1"]
    - set_fact:
        zid: "{{ groups['bookkeeper'].index(inventory_hostname) }}"
        max_heap_memory: "512m"
        max_direct_memory: "512m"
    - file:
        path: "/opt/zookeeper/{{ item }}"
        state: directory
      with_items:
        - data/zookeeper
    - template:
        src: "templates/zoo-all-in-one.cfg"
        dest: "/opt/zookeeper/conf/zoo.cfg"
    - template:
        src: templates/myid
        dest: "/opt/zookeeper/data/zookeeper/myid"
    - template:
        src: "templates/zookeeper.service"
        dest: "/etc/systemd/system/zookeeper.service"
    - systemd:
        name: "zookeeper"
        daemon_reload: yes
        state: restarted
        enabled: yes
    - name: Initialize ZooKeeper
      shell: >
        bin/zkServer-initialize.sh init --force --myid={{ zid }} && \
        (until bin/zkCli.sh ls / ; do sleep 1; done)
      args:
        chdir: /opt/zookeeper
      when: groups['bookkeeper'][0] == inventory_hostname
    - name: Create Zookeeper nodes
      shell: >
        bin/zkCli.sh create {{ item }}
      args:
        chdir: /opt/zookeeper
      when: groups['bookkeeper'][0] == inventory_hostname
      with_items:
        - /pravega
        - /pravega/pravega-cluster
        - /pravega/pravega-cluster/bookkeeper

- name: Pravega common installation
  hosts: ["bookkeeper"]
  tags: ["controller", "segmentstore"]
  connection: ssh
  become: true
  tasks:
    - set_fact:
    - file: path=/opt/pravega state=absent
    - file: path=/opt/pravega state=directory
    - name: Download Pravega binary package
      unarchive:
        src: "{{ pravegaSrc }}"
        remote_src: "{{ pravegaSrcRemote }}"
        dest: /opt/pravega
        extra_opts: ["--strip-components=1"]
    - template:
        src: "templates/config-all-in-one.properties"
        dest: "/opt/pravega/conf/config.properties"
    - template:
        src: "templates/controller-all-in-one.config.properties"
        dest: "/opt/pravega/conf/controller.config.properties"
    - template:
        src: "templates/logback.xml"
        dest: "/opt/pravega/conf/logback.xml"

- name: Pravega Controller installation
  hosts: bookkeeper
  tags: ["bookkeeper"]
  connection: ssh
  become: true
  tasks:
    - template:
        src: "templates/pravega-controller.service"
        dest: "/etc/systemd/system/pravega-controller.service"
    - systemd:
        name: "pravega-controller"
        daemon_reload: yes
        state: restarted
        enabled: yes

- name: Format and mount disks for BookKeeper hosts
  hosts: bookkeeper
  tags: ["bookkeeper"]
  connection: ssh
  become: true
  tasks:
    - systemd:
        name: "bookkeeper"
        state: stopped
      ignore_errors: yes
    - name: Unmount disks
      mount:
        path: "{{ item.path }}"
        state: unmounted
      with_items:
        - { path: "/mnt/journal", src: "/dev/nvme2n1" }
        - { path: "/mnt/storage", src: "/dev/nvme1n1" }
    - name: Format disks
      filesystem:
        fstype: xfs
        dev: '{{ item }}'
        force: yes
      with_items:
        - '/dev/nvme2n1'
        - '/dev/nvme1n1'
    - name: Mount disks
      mount:
        path: "{{ item.path }}"
        src: "{{ item.src }}"
        fstype: xfs
        opts: defaults,noatime,nodiscard
        state: mounted
      with_items:
        - { path: "/mnt/journal", src: "/dev/nvme2n1" }
        - { path: "/mnt/storage", src: "/dev/nvme1n1" }

- name: BookKeeper setup
  hosts: bookkeeper
  tags: ["bookkeeper"]
  connection: ssh
  become: true
  tasks:
    - file: path=/opt/bookkeeper state=absent
    - file: path=/opt/bookkeeper state=directory
    - name: Download BookKeeper binary package
      unarchive:
        src: "https://archive.apache.org/dist/bookkeeper/bookkeeper-{{ bookkeeperVersion }}/bookkeeper-all-{{ bookkeeperVersion }}-bin.tar.gz"
        remote_src: yes
        dest: /opt/bookkeeper
        extra_opts: ["--strip-components=1"]
    - template:
        src: "templates/bk_server.conf"
        dest: "/opt/bookkeeper/conf/bk_server.conf"
    - template:
        src: "templates/bkenv.sh"
        dest: "/opt/bookkeeper/conf/bkenv.sh"
    - template:
        src: "templates/common.sh"
        dest: "/opt/bookkeeper/bin/common.sh"
    - name: Format BookKeeper metadata in Zookeeper
      command: >
        bin/bookkeeper shell initnewcluster
      args:
        chdir: /opt/bookkeeper
      when: groups['bookkeeper'][0] == inventory_hostname
    - name: Start iostat
      shell: nohup iostat -xdct 1 10000 >> /opt/iostat.log &
      args:
        executable: /bin/bash
    - name: Install bookkeeper systemd service
      template:
        src: "templates/bookkeeper.service"
        dest: "/etc/systemd/system/bookkeeper.service"
    - systemd:
        name: "bookkeeper"
        daemon_reload: yes
        state: restarted
        enabled: yes

- name: Pravega Segment Store installation
  hosts: bookkeeper
  tags: ["segmentstore"]
  connection: ssh
  become: true
  tasks:
    - name: Mount EFS volume for Pravega tier 2 storage
      mount:
        path: "/mnt/tier2"
        src: "{{ groups['tier2'][0] }}:/"
        fstype: nfs4
        opts: nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport
        state: mounted
    - template:
        src: "templates/pravega-segmentstore.service"
        dest: "/etc/systemd/system/pravega-segmentstore.service"
    - systemd:
        name: "pravega-segmentstore"
        daemon_reload: yes
        state: restarted
        enabled: yes

- name: Run Pravega Tester
  hosts: ["bookkeeper"]
  tags: ["pravega-tester"]
  connection: ssh
  become: true
  tasks:
    - shell: >
        docker run --rm \
        -e PRAVEGA_CONTROLLER_URI={{ controllerUrl }} \
        -e PRAVEGA_SCOPE="examples" \
        -e CREATE_SCOPE="true" \
        -e DELETE_STREAM="false" \
        -e NUM_EVENTS="500" \
        -e pravega_client_auth_method= \
        -e pravega_client_auth_loadDynamic= \
        pravega/pravega-tester:0.9.1
